{"version":3,"file":"message_drawer.min.js","sources":["../src/message_drawer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message drawer.\n *\n * @module     core_message/message_drawer\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/custom_interaction_events',\n    'core/pubsub',\n    'core_message/message_drawer_view_contact',\n    'core_message/message_drawer_view_contacts',\n    'core_message/message_drawer_view_conversation',\n    'core_message/message_drawer_view_group_info',\n    'core_message/message_drawer_view_overview',\n    'core_message/message_drawer_view_search',\n    'core_message/message_drawer_view_settings',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_helper',\n    'core/pending',\n    'core/drawer',\n    'core/sessionstorage',\n    'core/notification',\n    'core/str',\n],\nfunction(\n    $,\n    CustomEvents,\n    PubSub,\n    ViewContact,\n    ViewContacts,\n    ViewConversation,\n    ViewGroupInfo,\n    ViewOverview,\n    ViewSearch,\n    ViewSettings,\n    Router,\n    Routes,\n    Events,\n    Helper,\n    Pending,\n    Drawer,\n    Storage,\n    Notification,\n    Str,\n) {\n\n    var SELECTORS = {\n        DRAWER: '[data-region=\"right-hand-drawer\"]',\n        JUMPTO: '.popover-region [data-region=\"jumpto\"]',\n        PANEL_BODY_CONTAINER: '[data-region=\"panel-body-container\"]',\n        PANEL_HEADER_CONTAINER: '[data-region=\"panel-header-container\"]',\n        VIEW_CONTACT: '[data-region=\"view-contact\"]',\n        VIEW_CONTACTS: '[data-region=\"view-contacts\"]',\n        VIEW_CONVERSATION: '[data-region=\"view-conversation\"]',\n        VIEW_CONVERSATION_WITH_ID: '[data-region=\"view-conversation\"][data-conversation-id]',\n        VIEW_CONVERSATION_WITH_USER: '[data-region=\"view-conversation\"][data-other-user-id]',\n        VIEW_GROUP_INFO: '[data-region=\"view-group-info\"]',\n        VIEW_OVERVIEW: '[data-region=\"view-overview\"]',\n        VIEW_SEARCH: '[data-region=\"view-search\"]',\n        VIEW_SETTINGS: '[data-region=\"view-settings\"]',\n        ROUTES: '[data-route]',\n        ROUTES_BACK: '[data-route-back]',\n        HEADER_CONTAINER: '[data-region=\"header-container\"]',\n        BODY_CONTAINER: '[data-region=\"body-container\"]',\n        FOOTER_CONTAINER: '[data-region=\"footer-container\"]',\n        CLOSE_BUTTON: '[data-action=\"closedrawer\"]',\n        MESSAGE_INDEX: '[data-region=\"message-index\"]',\n        MESSAGE_TEXT_AREA: '[data-region=\"send-message-txt\"]',\n    };\n\n    /**\n     * Get elements for route.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @param {Object} root The message drawer container.\n     * @param {string} selector The route container.\n     *\n     * @return {array} elements Found route container objects.\n     */\n    var getParametersForRoute = function(namespace, root, selector) {\n\n        var header = root.find(SELECTORS.HEADER_CONTAINER).find(selector);\n        if (!header.length) {\n            header = root.find(SELECTORS.PANEL_HEADER_CONTAINER).find(selector);\n        }\n        var body = root.find(SELECTORS.BODY_CONTAINER).find(selector);\n        if (!body.length) {\n            body = root.find(SELECTORS.PANEL_BODY_CONTAINER).find(selector);\n        }\n        var footer = root.find(SELECTORS.FOOTER_CONTAINER).find(selector);\n\n        return [\n            namespace,\n            header.length ? header : null,\n            body.length ? body : null,\n            footer.length ? footer : null\n        ];\n    };\n\n    var routes = [\n        [Routes.VIEW_CONTACT, SELECTORS.VIEW_CONTACT, ViewContact.show, ViewContact.description],\n        [Routes.VIEW_CONTACTS, SELECTORS.VIEW_CONTACTS, ViewContacts.show, ViewContacts.description],\n        [Routes.VIEW_CONVERSATION, SELECTORS.VIEW_CONVERSATION, ViewConversation.show, ViewConversation.description],\n        [Routes.VIEW_GROUP_INFO, SELECTORS.VIEW_GROUP_INFO, ViewGroupInfo.show, ViewGroupInfo.description],\n        [Routes.VIEW_OVERVIEW, SELECTORS.VIEW_OVERVIEW, ViewOverview.show, ViewOverview.description],\n        [Routes.VIEW_SEARCH, SELECTORS.VIEW_SEARCH, ViewSearch.show, ViewSearch.description],\n        [Routes.VIEW_SETTINGS, SELECTORS.VIEW_SETTINGS, ViewSettings.show, ViewSettings.description]\n    ];\n\n    /**\n     * Create routes.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @param {Object} root The message drawer container.\n     */\n    var createRoutes = function(namespace, root) {\n        routes.forEach(function(route) {\n            Router.add(namespace, route[0], getParametersForRoute(namespace, root, route[1]), route[2], route[3]);\n        });\n    };\n\n    /**\n     * Show the message drawer.\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} root The message drawer container.\n     */\n    var show = function(namespace, root) {\n        if (!root.attr('data-shown')) {\n            Router.go(namespace, Routes.VIEW_OVERVIEW);\n            root.attr('data-shown', true);\n        }\n\n        var drawerRoot = Drawer.getDrawerRoot(root);\n        if (drawerRoot.length) {\n            Drawer.show(drawerRoot);\n        }\n    };\n\n    /**\n     * Hide the message drawer.\n     *\n     * @param {Object} root The message drawer container.\n     */\n    var hide = function(root) {\n        var drawerRoot = Drawer.getDrawerRoot(root);\n        if (drawerRoot.length) {\n            Drawer.hide(drawerRoot);\n        }\n    };\n\n    /**\n     * Check if the drawer is visible.\n     *\n     * @param {Object} root The message drawer container.\n     * @return {boolean}\n     */\n    var isVisible = function(root) {\n        var drawerRoot = Drawer.getDrawerRoot(root);\n        if (drawerRoot.length) {\n            return Drawer.isVisible(drawerRoot);\n        }\n        return true;\n    };\n\n    /**\n     * Set Jump from button\n     *\n     * @param {String} buttonid The originating button id\n     */\n    var setJumpFrom = function(buttonid) {\n        $(SELECTORS.DRAWER).attr('data-origin', buttonid);\n    };\n\n    /**\n     * Store an unsent message.\n     *\n     * Don't store this if the user has already seen the unsent message.\n     * This avoids spamming and ensures the user is only reminded once per unsent message.\n     * If the unsent message is sent, this attribute is removed and notification is possible again (see sendMessage).\n     */\n    const storeUnsentMessage = () => {\n        const messageTextArea = document.querySelector(SELECTORS.MESSAGE_TEXT_AREA);\n        if (messageTextArea.value.trim().length > 0 && !messageTextArea.hasAttribute('data-unsent-message-viewed')) {\n            const args = {\n                message: messageTextArea.value,\n            };\n\n            // We don't always have a conversation to link the unsent message to, so let's check for that.\n            const conversationId = document.querySelector(SELECTORS.VIEW_CONVERSATION_WITH_ID);\n            if (conversationId) {\n                const conversationWithId = messageTextArea.closest(SELECTORS.VIEW_CONVERSATION_WITH_ID);\n                args.conversationid = conversationWithId.getAttribute('data-conversation-id');\n            }\n            // Store the 'other' user id if it is there. This can be used to create conversations.\n            const conversationUser = document.querySelector(SELECTORS.VIEW_CONVERSATION_WITH_USER);\n            if (conversationUser) {\n                const conversationWithUser = messageTextArea.closest(SELECTORS.VIEW_CONVERSATION_WITH_USER);\n                args.otheruserid = conversationWithUser.getAttribute('data-other-user-id');\n            }\n\n            Storage.set('unsentmessage', JSON.stringify(args));\n        }\n    };\n\n    /**\n     * Handle the unsent message.\n     *\n     * @param {String} uniqueId Unique identifier for the Routes.\n     * @param {Object} root The message drawer container.\n     */\n    const handleUnsentMessage = (uniqueId, root) => {\n        const storedMessage = Storage.get('unsentmessage');\n\n        if (storedMessage) {\n            // This logic is needed to handle the two message widgets on the message/index page.\n            // First, check if we are on the message/index page.\n            const messageIndex = document.querySelector(SELECTORS.MESSAGE_INDEX);\n            if (messageIndex !== null) {\n                // Next, target the messages contained in the message index element.\n                const messageRoot = document.getElementById(`message-index-${uniqueId}`);\n                if (messageRoot) {\n                    const messageTextArea = messageRoot.querySelector(SELECTORS.MESSAGE_TEXT_AREA);\n                    showUnsentMessage(messageTextArea, storedMessage, 'index', uniqueId, root);\n                }\n            } else {\n                const messageRoot = document.getElementById(`message-drawer-${uniqueId}`);\n                if (messageRoot) {\n                    const messageTextArea = messageRoot.querySelector(SELECTORS.MESSAGE_TEXT_AREA);\n                    showUnsentMessage(messageTextArea, storedMessage, 'drawer', uniqueId, root);\n                }\n            }\n        }\n    };\n\n    /**\n     * Show an unsent message.\n     *\n     * There are two message widgets on the message/index page.\n     * Because of that, we need to try and target the correct widget.\n     *\n     * @param {String} textArea The textarea element.\n     * @param {String} stored The stored message content.\n     * @param {String} type Is this from the drawer or index page?\n     * @param {String} uniqueId Unique identifier for the Routes.\n     * @param {Object} root The message drawer container.\n     */\n    const showUnsentMessage = (textArea, stored, type, uniqueId, root) => {\n        // The user has already been notified.\n        if (textArea.hasAttribute('data-unsent-message-viewed')) {\n            return;\n        }\n\n        const storedMessage = JSON.parse(stored);\n\n        // Depending on the type, show the conversation with the data we have available.\n        // A conversation can be continued if there is a conversationid.\n        // If the user was messaging a new non-contact, we won't have a conversationid yet.\n        // In that case, we use the otheruserid value to start a conversation with them.\n        switch (type) {\n            case 'index':\n                // Show the conversation in the main panel on the message/index page.\n                if (storedMessage.conversationid) {\n                    Router.go(uniqueId, Routes.VIEW_CONVERSATION, storedMessage.conversationid, 'frompanel');\n                // There was no conversation id, let's get a conversation going using the user id.\n                } else if (storedMessage.otheruserid) {\n                    Router.go(uniqueId, Routes.VIEW_CONVERSATION, null, 'create', storedMessage.otheruserid);\n                }\n                break;\n\n            case 'drawer':\n                // Open the drawer and show the conversation.\n                if (storedMessage.conversationid) {\n                    let args = {\n                        conversationid: storedMessage.conversationid\n                    };\n                    Helper.showConversation(args);\n                // There was no conversation id, let's get a conversation going using the user id.\n                } else if (storedMessage.otheruserid) {\n                    show(uniqueId, root);\n                    Router.go(uniqueId, Routes.VIEW_CONVERSATION, null, 'create', storedMessage.otheruserid);\n                }\n                break;\n        }\n\n        // Populate the text area.\n        textArea.value = storedMessage.message;\n        textArea.setAttribute('data-unsent-message-viewed', 1);\n\n        // Notify the user.\n        Notification.alert(\n            Str.get_string('unsentmessage', 'core_message'),\n            Str.get_string('unsentmessagedetails', 'core_message')\n        );\n\n        // Empty the stored message so they only get notified once.\n        Storage.set('unsentmessage', '');\n    };\n\n    /**\n     * Listen to and handle events for routing, showing and hiding the message drawer.\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} root The message drawer container.\n     * @param {bool} alwaysVisible Is this messaging app always shown?\n     */\n    var registerEventListeners = function(namespace, root, alwaysVisible) {\n        CustomEvents.define(root, [CustomEvents.events.activate]);\n        var paramRegex = /^data-route-param-?(\\d*)$/;\n\n        root.on(CustomEvents.events.activate, SELECTORS.ROUTES, function(e, data) {\n            var element = $(e.target).closest(SELECTORS.ROUTES);\n            var route = element.attr('data-route');\n            var attributes = [];\n\n            for (var i = 0; i < element[0].attributes.length; i++) {\n                attributes.push(element[0].attributes[i]);\n            }\n\n            var paramAttributes = attributes.filter(function(attribute) {\n                var name = attribute.nodeName;\n                var match = paramRegex.test(name);\n                return match;\n            });\n            paramAttributes.sort(function(a, b) {\n                var aParts = paramRegex.exec(a.nodeName);\n                var bParts = paramRegex.exec(b.nodeName);\n                var aIndex = aParts.length > 1 ? aParts[1] : 0;\n                var bIndex = bParts.length > 1 ? bParts[1] : 0;\n\n                if (aIndex < bIndex) {\n                    return -1;\n                } else if (bIndex < aIndex) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var params = paramAttributes.map(function(attribute) {\n                return attribute.nodeValue;\n            });\n\n            var routeParams = [namespace, route].concat(params);\n\n            Router.go.apply(null, routeParams);\n\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ROUTES_BACK, function(e, data) {\n            Router.back(namespace);\n\n            data.originalEvent.preventDefault();\n        });\n\n        // These are theme-specific to help us fix random behat fails.\n        // These events target those events defined in BS3 and BS4 onwards.\n        root.on('hide.bs.collapse', '.collapse', function(e) {\n            var pendingPromise = new Pending();\n            $(e.target).one('hidden.bs.collapse', function() {\n                pendingPromise.resolve();\n            });\n        });\n\n        root.on('show.bs.collapse', '.collapse', function(e) {\n            var pendingPromise = new Pending();\n            $(e.target).one('shown.bs.collapse', function() {\n                pendingPromise.resolve();\n            });\n        });\n\n        $(SELECTORS.JUMPTO).focus(function() {\n            var firstInput = root.find(SELECTORS.CLOSE_BUTTON);\n            if (firstInput.length) {\n                firstInput.focus();\n            } else {\n                $(SELECTORS.HEADER_CONTAINER).find(SELECTORS.ROUTES_BACK).focus();\n            }\n        });\n\n        $(SELECTORS.DRAWER).focus(function() {\n            var button = $(this).attr('data-origin');\n            if (button) {\n                $('#' + button).focus();\n            }\n        });\n\n        if (!alwaysVisible) {\n            PubSub.subscribe(Events.SHOW, function() {\n                show(namespace, root);\n            });\n\n            PubSub.subscribe(Events.HIDE, function() {\n                hide(root);\n            });\n\n            PubSub.subscribe(Events.TOGGLE_VISIBILITY, function(buttonid) {\n                if (isVisible(root)) {\n                    hide(root);\n                    $(SELECTORS.JUMPTO).attr('tabindex', -1);\n                } else {\n                    show(namespace, root);\n                    setJumpFrom(buttonid);\n                    $(SELECTORS.JUMPTO).attr('tabindex', 0);\n                }\n            });\n        }\n\n        PubSub.subscribe(Events.SHOW_CONVERSATION, function(args) {\n            setJumpFrom(args.buttonid);\n            show(namespace, root);\n            Router.go(namespace, Routes.VIEW_CONVERSATION, args.conversationid);\n        });\n\n        var closebutton = root.find(SELECTORS.CLOSE_BUTTON);\n        closebutton.on(CustomEvents.events.activate, function(e, data) {\n            data.originalEvent.preventDefault();\n\n            var button = $(SELECTORS.DRAWER).attr('data-origin');\n            if (button) {\n                $('#' + button).focus();\n            }\n            PubSub.publish(Events.TOGGLE_VISIBILITY);\n        });\n\n        PubSub.subscribe(Events.CREATE_CONVERSATION_WITH_USER, function(args) {\n            setJumpFrom(args.buttonid);\n            show(namespace, root);\n            Router.go(namespace, Routes.VIEW_CONVERSATION, null, 'create', args.userid);\n        });\n\n        PubSub.subscribe(Events.SHOW_SETTINGS, function() {\n            show(namespace, root);\n            Router.go(namespace, Routes.VIEW_SETTINGS);\n        });\n\n        PubSub.subscribe(Events.PREFERENCES_UPDATED, function(preferences) {\n            var filteredPreferences = preferences.filter(function(preference) {\n                return preference.type == 'message_entertosend';\n            });\n            var enterToSendPreference = filteredPreferences.length ? filteredPreferences[0] : null;\n\n            if (enterToSendPreference) {\n                var viewConversationFooter = root.find(SELECTORS.FOOTER_CONTAINER).find(SELECTORS.VIEW_CONVERSATION);\n                viewConversationFooter.attr('data-enter-to-send', enterToSendPreference.value);\n            }\n        });\n\n        // Catch any unsent messages and store them.\n        window.addEventListener('beforeunload', storeUnsentMessage);\n    };\n\n    /**\n     * Initialise the message drawer.\n     *\n     * @param {Object} root The message drawer container.\n     * @param {String} uniqueId Unique identifier for the Routes\n     * @param {bool} alwaysVisible Should we show the app now, or wait for the user?\n     * @param {Object} route\n     */\n    var init = function(root, uniqueId, alwaysVisible, route) {\n        root = $(root);\n        createRoutes(uniqueId, root);\n        registerEventListeners(uniqueId, root, alwaysVisible);\n\n        if (alwaysVisible) {\n            show(uniqueId, root);\n\n            if (route) {\n                var routeParams = route.params || [];\n                routeParams = [uniqueId, route.path].concat(routeParams);\n                Router.go.apply(null, routeParams);\n            }\n        }\n\n        // Mark the drawer as ready.\n        Helper.markDrawerReady();\n\n        // Show any unsent messages.\n        handleUnsentMessage(uniqueId, root);\n    };\n\n    return {\n        init: init,\n    };\n});\n"],"names":["define","$","CustomEvents","PubSub","ViewContact","ViewContacts","ViewConversation","ViewGroupInfo","ViewOverview","ViewSearch","ViewSettings","Router","Routes","Events","Helper","Pending","Drawer","Storage","Notification","Str","SELECTORS","routes","VIEW_CONTACT","show","description","VIEW_CONTACTS","VIEW_CONVERSATION","VIEW_GROUP_INFO","VIEW_OVERVIEW","VIEW_SEARCH","VIEW_SETTINGS","createRoutes","namespace","root","forEach","route","add","selector","header","find","length","body","footer","getParametersForRoute","attr","go","drawerRoot","getDrawerRoot","hide","setJumpFrom","buttonid","storeUnsentMessage","messageTextArea","document","querySelector","value","trim","hasAttribute","args","message","conversationWithId","closest","conversationid","getAttribute","conversationWithUser","otheruserid","set","JSON","stringify","showUnsentMessage","textArea","stored","type","uniqueId","storedMessage","parse","showConversation","setAttribute","alert","get_string","registerEventListeners","alwaysVisible","events","activate","paramRegex","on","e","data","element","target","attributes","i","push","paramAttributes","filter","attribute","name","nodeName","test","sort","a","b","aParts","exec","bParts","aIndex","bIndex","params","map","nodeValue","routeParams","concat","apply","originalEvent","preventDefault","back","pendingPromise","one","resolve","focus","firstInput","button","this","subscribe","SHOW","HIDE","TOGGLE_VISIBILITY","isVisible","SHOW_CONVERSATION","publish","CREATE_CONVERSATION_WITH_USER","userid","SHOW_SETTINGS","PREFERENCES_UPDATED","preferences","filteredPreferences","preference","enterToSendPreference","window","addEventListener","init","path","markDrawerReady","get","messageRoot","getElementById","handleUnsentMessage"],"mappings":"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"}