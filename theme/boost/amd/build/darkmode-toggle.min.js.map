{"version":3,"file":"darkmode-toggle.min.js","sources":["../src/darkmode-toggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS module for toggling the sensitive input visibility (e.g. passwords, keys).\n *\n * @module     core/togglesensitive\n * @copyright  2023 David Woloszyn <david.woloszyn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst SELECTORS = {\n    BUTTON: '#toggledarkmode',\n    ICON: '#toggledarkmode .icon',\n};\n\n// const PIX = {\n//     EYE: 't/hide',\n//     EYE_SLASH: 't/show',\n// };\n\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n */\nexport const init = () => {\n    window.console.log('zzz');\n    registerListenerEvents();\n};\n\n\n/**\n * Register event listeners.\n *\n * @method registerListenerEvents\n */\nconst registerListenerEvents = () => {\n\n    // Toggle the sensitive input visibility when interacting with the toggle button.\n    document.addEventListener('click', (event) => {\n        const toggleButton = event.target.closest(SELECTORS.BUTTON);\n        if (toggleButton) {\n            window.console.log('xxxxx');\n        }\n    });\n\n};\n\n// /**\n//  * Toggle the sensitive input visibility and its associated icon.\n//  *\n//  * @method toggleSensitiveVisibility\n//  * @param {HTMLInputElement} sensitiveInput The sensitive input element.\n//  * @param {HTMLElement} toggleButton The toggle button.\n//  * @param {boolean} force Force the input back to password type.\n//  */\n// const toggleSensitiveVisibility = (sensitiveInput, toggleButton, force = false) => {\n//     const pendingPromise = new Pending('core/togglesensitive:toggle');\n//     let type;\n//     let icon;\n//     if (force === true) {\n//         type = 'password';\n//         icon = PIX.EYE;\n//     } else {\n//         type = sensitiveInput.getAttribute('type') === 'password' ? 'text' : 'password';\n//         icon = sensitiveInput.getAttribute('type') === 'password' ? PIX.EYE_SLASH : PIX.EYE;\n//     }\n//     sensitiveInput.setAttribute('type', type);\n//     Templates.renderPix(icon, 'core').then((icon) => {\n//         toggleButton.innerHTML = icon;\n//         pendingPromise.resolve();\n//         return;\n//     }).catch(Notification.exception);\n// };\n"],"names":["SELECTORS","window","console","log","registerListenerEvents","document","addEventListener","event","target","closest"],"mappings":";;;;;;;;MAuBMA,iBACM,gCAeQ,KAChBC,OAAOC,QAAQC,IAAI,OACnBC,gCASEA,uBAAyB,KAG3BC,SAASC,iBAAiB,SAAUC,QACXA,MAAMC,OAAOC,QAAQT,mBAEtCC,OAAOC,QAAQC,IAAI"}