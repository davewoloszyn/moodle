{"version":3,"file":"helpers.min.js","sources":["../src/helpers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin helpers for image and embed.\n *\n * @module      tiny_media/helpers\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Selectors from './selectors';\nimport {isUrlFromKnownMediaSites} from './embed/mediahelpers';\n\n/**\n * Renders and inserts the body template for inserting an media into the modal.\n *\n * @param {object} templateContext - The context for rendering the template.\n * @param {HTMLElement} root - The root element where the template will be inserted.\n * @returns {Promise<void>}\n */\nexport const body = async(templateContext, root) => {\n    return Templates.renderForPromise(templateContext.bodyTemplate, {...templateContext})\n    .then(({html, js}) => {\n        Templates.replaceNodeContents(root.querySelector(Selectors[templateContext.selector].elements.bodyTemplate), html, js);\n        return;\n    })\n    .catch(error => {\n        window.console.log(error);\n    });\n};\n\n/**\n * Renders and inserts the footer template for inserting an media into the modal.\n *\n * @param {object} templateContext - The context for rendering the template.\n * @param {HTMLElement} root - The root element where the template will be inserted.\n * @returns {Promise<void>}\n */\nexport const footer = async(templateContext, root) => {\n    return Templates.renderForPromise(templateContext.footerTemplate, {...templateContext})\n    .then(({html, js}) => {\n        Templates.replaceNodeContents(root.querySelector(Selectors[templateContext.selector].elements.footerTemplate), html, js);\n        return;\n    })\n    .catch(error => {\n        window.console.log(error);\n    });\n};\n\n/**\n * Check if given string is a valid URL.\n *\n * @param {String} urlString URL the link will point to.\n * @returns {boolean} True is valid, otherwise false.\n */\nexport const isValidUrl = urlString => {\n    const urlPattern = new RegExp('^(https?:\\\\/\\\\/)?' + // Protocol.\n                                '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // Domain name.\n                                '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})|localhost)' + // OR ip (v4) address, localhost.\n                                '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'); // Port and path.\n    return !!urlPattern.test(urlString);\n};\n\n/**\n * Show the element(s).\n *\n * @param {string|string[]} elements - The CSS selector for the elements to toggle.\n * @param {object} root - The CSS selector for the elements to toggle.\n */\nexport const showElements = (elements, root) => {\n    if (elements instanceof Array) {\n        elements.forEach((elementSelector) => {\n            const element = root.querySelector(elementSelector);\n            if (element) {\n                element.classList.remove('d-none');\n            }\n        });\n    } else {\n        const element = root.querySelector(elements);\n        if (element) {\n            element.classList.remove('d-none');\n        }\n    }\n};\n\n/**\n * Hide the element(s).\n *\n * @param {string|string[]} elements - The CSS selector for the elements to toggle.\n * @param {object} root - The CSS selector for the elements to toggle.\n */\nexport const hideElements = (elements, root) => {\n    if (elements instanceof Array) {\n        elements.forEach((elementSelector) => {\n            const element = root.querySelector(elementSelector);\n            if (element) {\n                element.classList.add('d-none');\n            }\n        });\n    } else {\n        const element = root.querySelector(elements);\n        if (element) {\n            element.classList.add('d-none');\n        }\n    }\n};\n\n/**\n * Return file mime type from the url.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const getFileMimeTypeFromUrl = async(url) => {\n    if (isUrlFromKnownMediaSites(url)) {\n        return 'link';\n    }\n\n    let fetchedMimeType = null;\n    const mimeTypes = Selectors.MEDIA_MIME_TYPES;\n    for (const property in mimeTypes) {\n        const uri = url.split('/');\n        const fileName = uri[uri.length - 1];\n        let fileExtension = fileName.split('.');\n        fileExtension = fileExtension[fileExtension.length - 1];\n        if ((fileExtension.includes('/') || fileExtension.includes('?')) && fileExtension.includes(property)) {\n            fetchedMimeType = mimeTypes[property];\n        } else if (fileExtension === property) {\n            fetchedMimeType = mimeTypes[property];\n            break;\n        }\n    }\n    return fetchedMimeType;\n};\n\n/**\n * Displays the upload loader and disables UI elements while loading a file.\n *\n * @param {html} root Modal element\n * @param {string} selector String of type IMAGE/EMBED\n */\nexport const startMediaLoading = (root, selector) => {\n    showElements(Selectors[selector].elements.loaderIcon, root);\n    const elementsToHide = [\n        Selectors[selector].elements.insertMedia,\n        Selectors[selector].elements.urlWarning,\n        Selectors[selector].elements.modalFooter,\n    ];\n    hideElements(elementsToHide, root);\n};\n\n/**\n * Displays the upload loader and disables UI elements while loading a file.\n *\n * @param {html} root Modal element\n * @param {string} selector String of type IMAGE/EMBED\n */\nexport const stopMediaLoading = (root, selector) => {\n    hideElements(Selectors[selector].elements.loaderIcon, root);\n    const elementsToShow = [\n        Selectors[selector].elements.insertMedia,\n        Selectors[selector].elements.modalFooter,\n    ];\n    showElements(elementsToShow, root);\n};\n\n/**\n * Convert string url to object.\n *\n * @param {string} url\n * @returns {object}\n */\nexport const convertStringUrlToObject = (url) => {\n    return Object.fromEntries(\n        new URLSearchParams(url)\n    );\n};\n\n/**\n * Create url params based on the object.\n *\n * @param {object} params\n * @returns {string}\n */\nexport const createUrlParams = (params) => {\n    return Object.entries(params)\n        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        .join('&');\n};\n"],"names":["async","templateContext","root","Templates","renderForPromise","bodyTemplate","then","_ref","html","js","replaceNodeContents","querySelector","Selectors","selector","elements","catch","error","window","console","log","footerTemplate","_ref2","urlString","RegExp","test","showElements","Array","forEach","elementSelector","element","classList","remove","hideElements","add","url","fetchedMimeType","mimeTypes","MEDIA_MIME_TYPES","property","uri","split","fileExtension","length","includes","loaderIcon","elementsToHide","insertMedia","urlWarning","modalFooter","elementsToShow","Object","fromEntries","URLSearchParams","params","entries","map","_ref3","key","value","encodeURIComponent","join"],"mappings":";;;;;;;4ZAkCoBA,MAAMC,gBAAiBC,OAChCC,mBAAUC,iBAAiBH,gBAAgBI,aAAc,IAAIJ,kBACnEK,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BACAC,oBAAoBR,KAAKS,cAAcC,mBAAUX,gBAAgBY,UAAUC,SAAST,cAAeG,KAAMC,OAGtHM,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,0BAWLhB,MAAMC,gBAAiBC,OAClCC,mBAAUC,iBAAiBH,gBAAgBmB,eAAgB,IAAInB,kBACrEK,MAAKe,YAACb,KAACA,KAADC,GAAOA,6BACAC,oBAAoBR,KAAKS,cAAcC,mBAAUX,gBAAgBY,UAAUC,SAASM,gBAAiBZ,KAAMC,OAGxHM,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,8BAUDM,aACH,IAAIC,OAAO,yIAIVC,KAAKF,iBAShBG,aAAe,CAACX,SAAUZ,WAC/BY,oBAAoBY,MACpBZ,SAASa,SAASC,wBACRC,QAAU3B,KAAKS,cAAciB,iBAC/BC,SACAA,QAAQC,UAAUC,OAAO,iBAG9B,OACGF,QAAU3B,KAAKS,cAAcG,UAC/Be,SACAA,QAAQC,UAAUC,OAAO,qDAWxBC,aAAe,CAAClB,SAAUZ,WAC/BY,oBAAoBY,MACpBZ,SAASa,SAASC,wBACRC,QAAU3B,KAAKS,cAAciB,iBAC/BC,SACAA,QAAQC,UAAUG,IAAI,iBAG3B,OACGJ,QAAU3B,KAAKS,cAAcG,UAC/Be,SACAA,QAAQC,UAAUG,IAAI,+EAWIjC,MAAAA,UAC9B,0CAAyBkC,WAClB,WAGPC,gBAAkB,WAChBC,UAAYxB,mBAAUyB,qBACvB,MAAMC,YAAYF,UAAW,OACxBG,IAAML,IAAIM,MAAM,SAElBC,cADaF,IAAIA,IAAIG,OAAS,GACLF,MAAM,QACnCC,cAAgBA,cAAcA,cAAcC,OAAS,IAChDD,cAAcE,SAAS,MAAQF,cAAcE,SAAS,OAASF,cAAcE,SAASL,UACvFH,gBAAkBC,UAAUE,eACzB,GAAIG,gBAAkBH,SAAU,CACnCH,gBAAkBC,UAAUE,wBAI7BH,4CASsB,CAACjC,KAAMW,YACpCY,aAAab,mBAAUC,UAAUC,SAAS8B,WAAY1C,YAChD2C,eAAiB,CACnBjC,mBAAUC,UAAUC,SAASgC,YAC7BlC,mBAAUC,UAAUC,SAASiC,WAC7BnC,mBAAUC,UAAUC,SAASkC,aAEjChB,aAAaa,eAAgB3C,iCASD,CAACA,KAAMW,YACnCmB,aAAapB,mBAAUC,UAAUC,SAAS8B,WAAY1C,YAChD+C,eAAiB,CACnBrC,mBAAUC,UAAUC,SAASgC,YAC7BlC,mBAAUC,UAAUC,SAASkC,aAEjCvB,aAAawB,eAAgB/C,yCASQgC,KAC9BgB,OAAOC,YACV,IAAIC,gBAAgBlB,+BAUImB,QACrBH,OAAOI,QAAQD,QACjBE,KAAIC,YAAEC,IAAKC,6BAAcC,mBAAmBF,iBAAQE,mBAAmBD,WACvEE,KAAK"}