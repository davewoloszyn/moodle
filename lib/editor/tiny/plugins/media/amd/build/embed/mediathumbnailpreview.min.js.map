{"version":3,"file":"mediathumbnailpreview.min.js","sources":["../../src/embed/mediathumbnailpreview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media thumbnail preview class for embed.\n *\n * @module      tiny_media/embed/mediathumbnail\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Selectors from '../selectors';\nimport {getString} from 'core/str';\nimport {sourceTypeChecked} from '../helpers';\nimport {MediaDetails} from './mediadetails';\nimport {mediaDetailsTemplateContext} from './mediahelpers';\nimport {MediaHandler} from './mediahandler';\nimport {PropertySetter} from '../propertysetter';\n\nexport class MediaThumbnailPreview extends PropertySetter {\n\n    constructor(data) {\n        super(data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the media thumbnail preview.\n     *\n     * @param {object} mediaData Object of selected media data\n     */\n    init = (mediaData) => {\n        this.mediaData = mediaData;\n        this.currentModal.uploadThumbnailModal.setTitle(getString('thumbnail', 'tiny_media'));\n        sourceTypeChecked({\n            source: this.thumbnail,\n            root: this.thumbnailModalRoot,\n            fileNameSelector: Selectors.EMBED.elements.fileNameLabel,\n        });\n        this.setThumbnailSource();\n        this.registerMediaThumbnailEventListeners();\n    };\n\n    /**\n     * Sets media thumbnail source.\n     */\n    setThumbnailSource = () => {\n        const preview = this.thumbnailModalRoot.querySelector(Selectors.EMBED.elements.preview);\n        preview.src = this.thumbnail;\n    };\n\n    /**\n     * Deletes the media after confirming with the user and loads the insert media page.\n     */\n    deleteMedia = () => {\n        Notification.deleteCancelPromise(\n            getString('deletemediathumbnail', 'tiny_media'),\n            getString('deletemediathumbnailwarning', 'tiny_media'),\n        ).then(() => {\n            this.currentModal.uploadThumbnailModal.destroy();\n            return;\n        }).catch(error => {\n            window.console.log(error);\n        });\n    };\n\n    /**\n     * Loads and displays a media preview with thumbnail.\n     */\n    loadPreviewMediaThumbnail = async() => {\n        const templateContext = await mediaDetailsTemplateContext(this);\n        templateContext.selector = 'EMBED';\n        if (this.mediaType === 'video' && this.isUpdating) {\n            // Let's get selected video height & width and create props for them to be used in mediaDetails.\n            const media = templateContext.media;\n            if (media.height !== '' && media.width !== '') {\n                this.mediaHeight = media.height;\n                this.mediaWidth = media.width;\n            }\n        }\n\n        const mediaHandler = new MediaHandler(this);\n        mediaHandler.loadMediaDetails(new MediaDetails(this), templateContext);\n    };\n\n    /**\n     * Only registers event listeners for new loaded elements in mediaThumbnail.\n     */\n    registerMediaThumbnailEventListeners = () => {\n        const deleteMedia = this.thumbnailModalRoot.querySelector(Selectors.EMBED.actions.deleteThumbnail);\n        if (deleteMedia) {\n            deleteMedia.addEventListener('click', () => {\n                this.deleteMedia();\n            });\n        }\n\n        const setPoster = this.thumbnailModalRoot.querySelector(Selectors.EMBED.actions.setPoster);\n        if (setPoster) {\n            setPoster.addEventListener('click', () => {\n                this.loadPreviewMediaThumbnail();\n            });\n        }\n    };\n}\n"],"names":["MediaThumbnailPreview","PropertySetter","constructor","data","mediaData","currentModal","uploadThumbnailModal","setTitle","source","this","thumbnail","root","thumbnailModalRoot","fileNameSelector","Selectors","EMBED","elements","fileNameLabel","setThumbnailSource","registerMediaThumbnailEventListeners","querySelector","preview","src","deleteCancelPromise","then","destroy","catch","error","window","console","log","async","templateContext","selector","mediaType","isUpdating","media","height","width","mediaHeight","mediaWidth","MediaHandler","loadMediaDetails","MediaDetails","deleteMedia","actions","deleteThumbnail","addEventListener","setPoster","loadPreviewMediaThumbnail"],"mappings":"+uBAgCaA,8BAA8BC,+BAEvCC,YAAYC,YACFA,mCAQFC,iBACCA,UAAYA,eACZC,aAAaC,qBAAqBC,UAAS,kBAAU,YAAa,8CACrD,CACdC,OAAQC,KAAKC,UACbC,KAAMF,KAAKG,mBACXC,iBAAkBC,mBAAUC,MAAMC,SAASC,qBAE1CC,0BACAC,qFAMY,KACDV,KAAKG,mBAAmBQ,cAAcN,mBAAUC,MAAMC,SAASK,SACvEC,IAAMb,KAAKC,iDAMT,2BACGa,qBACT,kBAAU,uBAAwB,eAClC,kBAAU,8BAA+B,eAC3CC,MAAK,UACEnB,aAAaC,qBAAqBmB,aAExCC,OAAMC,QACLC,OAAOC,QAAQC,IAAIH,+DAOCI,gBAClBC,sBAAwB,6CAA4BvB,SAC1DuB,gBAAgBC,SAAW,QACJ,UAAnBxB,KAAKyB,WAAyBzB,KAAK0B,WAAY,OAEzCC,MAAQJ,gBAAgBI,MACT,KAAjBA,MAAMC,QAAiC,KAAhBD,MAAME,aACxBC,YAAcH,MAAMC,YACpBG,WAAaJ,MAAME,OAIX,IAAIG,2BAAahC,MACzBiC,iBAAiB,IAAIC,2BAAalC,MAAOuB,iFAMnB,WAC7BY,YAAcnC,KAAKG,mBAAmBQ,cAAcN,mBAAUC,MAAM8B,QAAQC,iBAC9EF,aACAA,YAAYG,iBAAiB,SAAS,UAC7BH,uBAIPI,UAAYvC,KAAKG,mBAAmBQ,cAAcN,mBAAUC,MAAM8B,QAAQG,WAC5EA,WACAA,UAAUD,iBAAiB,SAAS,UAC3BE"}