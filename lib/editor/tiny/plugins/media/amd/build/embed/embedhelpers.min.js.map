{"version":3,"file":"embedhelpers.min.js","sources":["../../src/embed/embedhelpers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin helpers for embed.\n *\n * @module      tiny_media/embed/embedhelpers\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from '../selectors';\nimport {\n    convertStringUrlToObject,\n    createUrlParams,\n} from '../helpers';\nimport {\n    getCurrentLanguage,\n    getMoodleLang\n} from 'editor_tiny/options';\nimport {getStrings} from 'core/str';\nimport {component} from \"../common\";\n\n/**\n * Return template context for insert media.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const insertMediaTemplateContext = (props) => {\n    return {\n        mediaType: props.mediaType,\n        showDropzone: props.canShowDropZone,\n        showFilePicker: props.canShowFilePicker,\n    };\n};\n\n/**\n * Format url when inserting media link to be previewed.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const formatMediaUrl = (url) => {\n    // Convert the string url into url param object.\n    const params = convertStringUrlToObject(url);\n\n    // Format the url for youtube links.\n    if (url.includes(Selectors.EMBED.mediaSites.youtube)) {\n        let fetchedUrl = null;\n        let fetchedUrlValue = null;\n        for (const k in params) {\n            if (url.includes(k)) {\n                fetchedUrl = k;\n                fetchedUrlValue = params[k];\n                delete params[k];\n                break;\n            }\n        }\n        url = fetchedUrl.replace('watch?v', 'embed/');\n        url = url + fetchedUrlValue + '?' + createUrlParams(params);\n    }\n    return url;\n};\n\n/**\n * Return selected media type and element.\n *\n * @param {editor} editor\n * @returns {Array}\n */\nexport const getSelectedMediaElement = (editor) => {\n    let mediaType = null;\n    let selectedMedia = null;\n    const mediaElm = editor.selection.getNode();\n\n    if (!mediaElm) {\n        mediaType = null;\n        selectedMedia = null;\n    } else if (mediaElm.nodeName.toLowerCase() === 'video' || mediaElm.nodeName.toLowerCase() === 'audio') {\n        mediaType = mediaElm.nodeName.toLowerCase();\n        selectedMedia = mediaElm;\n    } else if (mediaElm.nodeName.toLowerCase() === 'a') {\n        mediaType = 'link';\n        selectedMedia = mediaElm;\n    } else if (mediaElm.querySelector('video')) {\n        mediaType = 'video';\n        selectedMedia = mediaElm.querySelector('video');\n    } else if (mediaElm.querySelector('audio')) {\n        mediaType = 'audio';\n        selectedMedia = mediaElm.querySelector('audio');\n    }\n\n    return [mediaType, selectedMedia];\n};\n\n/**\n * Get current moodle languages.\n *\n * @param {editor} editor\n * @returns {object}\n */\nexport const prepareMoodleLang = (editor) => {\n    const moodleLangs = getMoodleLang(editor);\n    const currentLanguage = getCurrentLanguage(editor);\n\n    const installed = Object.entries(moodleLangs.installed).map(([lang, code]) => ({\n        lang,\n        code,\n        \"default\": lang === currentLanguage,\n    }));\n\n    const available = Object.entries(moodleLangs.available).map(([lang, code]) => ({\n        lang,\n        code,\n        \"default\": lang === currentLanguage,\n    }));\n\n    return {\n        installed,\n        available,\n    };\n};\n\n/**\n * Get help strings.\n *\n * @returns {object}\n */\nexport const getHelpStrings = async() => {\n    const [\n        tracks,\n        subtitles,\n        captions,\n        descriptions,\n        chapters,\n        metadata,\n        customsize,\n    ] = await getStrings([\n        'tracks_help',\n        'subtitles_help',\n        'captions_help',\n        'descriptions_help',\n        'chapters_help',\n        'metadata_help',\n        'customsize_help',\n    ].map((key) => ({\n        key,\n        component,\n    })));\n\n    return {\n        tracks,\n        subtitles,\n        captions,\n        descriptions,\n        chapters,\n        metadata,\n        customsize,\n    };\n};\n\n/**\n * Return template context for media details.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const mediaDetailsTemplateContext = async(props) => {\n    const context = {\n        bodyTemplate: Selectors.EMBED.template.body.mediaDetailsBody,\n        footerTemplate: Selectors.EMBED.template.footer.mediaDetailsFooter,\n        isVideo: (props.mediaType === 'video'),\n        isAudio: (props.mediaType === 'audio'),\n        isLink: (props.mediaType === 'link'),\n        isUpdating: props.isUpdating,\n    };\n\n    if (props.mediaData) {\n        return {\n            ...context,\n            ...props.mediaData,\n        };\n    } else {\n        return {\n            ...context,\n            ...await props.mediaTemplateContext,\n        };\n    }\n};\n\n/**\n * Return moodle lang.\n *\n * @param {string} subtitleLang\n * @param {editor} editor\n * @returns {object|null}\n */\nexport const getMoodleLangObj = (subtitleLang, editor) => {\n    const {available} = getMoodleLang(editor);\n\n    if (available[subtitleLang]) {\n        return {\n            lang: subtitleLang,\n            code: available[subtitleLang],\n        };\n    }\n\n    return null;\n};\n\n/**\n * Get based url from the link.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const getLinkBasedUrl = (url) => {\n    if (url.includes(Selectors.EMBED.mediaSites.youtube)) {\n        if (url.includes('embed/')) {\n            const urlParams = url.split('embed/');\n            let id = null;\n            if (urlParams[1].includes('?')) {\n                id = urlParams[1].split('?')[0];\n            } else {\n                id = urlParams[1];\n            }\n            url = `${urlParams[0]}watch?v=${id}&`;\n        }\n    }\n    return url;\n};\n\n/**\n * Get media data from the inserted media.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const getEmbeddedMediaDetails = (props) => {\n    const tracks = {\n        subtitles: [],\n        captions: [],\n        descriptions: [],\n        chapters: [],\n        metadata: []\n    };\n\n    const mediaMetadata = props.root.querySelectorAll(Selectors.EMBED.elements.mediaMetadataTabPane);\n    mediaMetadata.forEach(metaData => {\n        const trackElements = metaData.querySelectorAll(Selectors.EMBED.elements.track);\n        trackElements.forEach(track => {\n            tracks[metaData.dataset.trackKind].push({\n                src: track.querySelector(Selectors.EMBED.elements.url).value,\n                srclang: track.querySelector(Selectors.EMBED.elements.trackLang).value,\n                label: track.querySelector(Selectors.EMBED.elements.trackLabel).value,\n                defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked,\n            });\n        });\n    });\n\n    const querySelector = (element) => props.root.querySelector(element);\n    const mediaDataProps = {};\n    mediaDataProps.media = {\n        type: props.mediaType,\n        sources: props.media,\n        poster: querySelector(Selectors.EMBED.elements.videoTag).getAttribute('poster'),\n        title: querySelector(Selectors.EMBED.elements.title).value,\n        width: querySelector(Selectors.EMBED.elements.width).value,\n        height: querySelector(Selectors.EMBED.elements.height).value,\n        autoplay: querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n        loop: querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n        muted: querySelector(Selectors.EMBED.elements.mediaMute).checked,\n        controls: querySelector(Selectors.EMBED.elements.mediaControl).checked,\n        tracks,\n    };\n    mediaDataProps.link = false;\n    return mediaDataProps;\n};\n\n/**\n * Set extra properties on an instance using incoming data.\n *\n * @param {object} instance\n * @param {object} data\n * @return {object} Modified instance\n */\nexport const setPropertiesFromData = (instance, data) => {\n    for (const property in data) {\n        if (typeof data[property] !== 'function') {\n            instance[property] = data[property];\n        }\n    }\n    return instance;\n};\n"],"names":["props","mediaType","showDropzone","canShowDropZone","showFilePicker","canShowFilePicker","url","params","includes","Selectors","EMBED","mediaSites","youtube","fetchedUrl","fetchedUrlValue","k","replace","editor","selectedMedia","mediaElm","selection","getNode","nodeName","toLowerCase","querySelector","moodleLangs","currentLanguage","installed","Object","entries","map","_ref","lang","code","available","_ref2","async","tracks","subtitles","captions","descriptions","chapters","metadata","customsize","key","component","context","bodyTemplate","template","body","mediaDetailsBody","footerTemplate","footer","mediaDetailsFooter","isVideo","isAudio","isLink","isUpdating","mediaData","mediaTemplateContext","subtitleLang","urlParams","split","id","root","querySelectorAll","elements","mediaMetadataTabPane","forEach","metaData","track","dataset","trackKind","push","src","value","srclang","trackLang","label","trackLabel","defaultTrack","trackDefault","checked","element","mediaDataProps","media","type","sources","poster","videoTag","getAttribute","title","width","height","autoplay","mediaAutoplay","loop","mediaLoop","muted","mediaMute","controls","mediaControl","link","instance","data","property"],"mappings":";;;;;;;8cAyC2CA,QAChC,CACHC,UAAWD,MAAMC,UACjBC,aAAcF,MAAMG,gBACpBC,eAAgBJ,MAAMK,4CAUCC,YAErBC,QAAS,qCAAyBD,QAGpCA,IAAIE,SAASC,mBAAUC,MAAMC,WAAWC,SAAU,KAC9CC,WAAa,KACbC,gBAAkB,SACjB,MAAMC,KAAKR,UACRD,IAAIE,SAASO,GAAI,CACjBF,WAAaE,EACbD,gBAAkBP,OAAOQ,UAClBR,OAAOQ,SAKtBT,KADAA,IAAMO,WAAWG,QAAQ,UAAW,WACxBF,gBAAkB,KAAM,4BAAgBP,eAEjDD,sCAS6BW,aAChChB,UAAY,KACZiB,cAAgB,WACdC,SAAWF,OAAOG,UAAUC,iBAE7BF,SAG0C,UAApCA,SAASG,SAASC,eAAiE,UAApCJ,SAASG,SAASC,eACxEtB,UAAYkB,SAASG,SAASC,cAC9BL,cAAgBC,UAC2B,MAApCA,SAASG,SAASC,eACzBtB,UAAY,OACZiB,cAAgBC,UACTA,SAASK,cAAc,UAC9BvB,UAAY,QACZiB,cAAgBC,SAASK,cAAc,UAChCL,SAASK,cAAc,WAC9BvB,UAAY,QACZiB,cAAgBC,SAASK,cAAc,WAbvCvB,UAAY,KACZiB,cAAgB,MAeb,CAACjB,UAAWiB,2CASWD,eACxBQ,aAAc,0BAAcR,QAC5BS,iBAAkB,+BAAmBT,cAcpC,CACHU,UAbcC,OAAOC,QAAQJ,YAAYE,WAAWG,KAAIC,WAAEC,KAAMC,iBAAW,CAC3ED,KAAAA,KACAC,KAAAA,aACWD,OAASN,oBAWpBQ,UARcN,OAAOC,QAAQJ,YAAYS,WAAWJ,KAAIK,YAAEH,KAAMC,kBAAW,CAC3ED,KAAAA,KACAC,KAAAA,aACWD,OAASN,8CAcEU,gBAEtBC,OACAC,UACAC,SACAC,aACAC,SACAC,SACAC,kBACM,mBAAW,CACjB,cACA,iBACA,gBACA,oBACA,gBACA,gBACA,mBACFb,KAAKc,OACHA,IAAAA,IACAC,UAAAA,6BAGG,CACHR,OAAAA,OACAC,UAAAA,UACAC,SAAAA,SACAC,aAAAA,aACAC,SAAAA,SACAC,SAAAA,SACAC,WAAAA,kDAUmCP,MAAAA,cACjCU,QAAU,CACZC,aAActC,mBAAUC,MAAMsC,SAASC,KAAKC,iBAC5CC,eAAgB1C,mBAAUC,MAAMsC,SAASI,OAAOC,mBAChDC,QAA8B,UAApBtD,MAAMC,UAChBsD,QAA8B,UAApBvD,MAAMC,UAChBuD,OAA6B,SAApBxD,MAAMC,UACfwD,WAAYzD,MAAMyD,mBAGlBzD,MAAM0D,UACC,IACAZ,WACA9C,MAAM0D,WAGN,IACAZ,iBACM9C,MAAM2D,iDAYK,CAACC,aAAc3C,gBACrCiB,UAACA,YAAa,0BAAcjB,eAE9BiB,UAAU0B,cACH,CACH5B,KAAM4B,aACN3B,KAAMC,UAAU0B,eAIjB,+BASqBtD,SACxBA,IAAIE,SAASC,mBAAUC,MAAMC,WAAWC,UACpCN,IAAIE,SAAS,UAAW,OAClBqD,UAAYvD,IAAIwD,MAAM,cACxBC,GAAK,KAELA,GADAF,UAAU,GAAGrD,SAAS,KACjBqD,UAAU,GAAGC,MAAM,KAAK,GAExBD,UAAU,GAEnBvD,cAASuD,UAAU,sBAAaE,eAGjCzD,sCAS6BN,cAC9BqC,OAAS,CACXC,UAAW,GACXC,SAAU,GACVC,aAAc,GACdC,SAAU,GACVC,SAAU,IAGQ1C,MAAMgE,KAAKC,iBAAiBxD,mBAAUC,MAAMwD,SAASC,sBAC7DC,SAAQC,WACIA,SAASJ,iBAAiBxD,mBAAUC,MAAMwD,SAASI,OAC3DF,SAAQE,QAClBjC,OAAOgC,SAASE,QAAQC,WAAWC,KAAK,CACpCC,IAAKJ,MAAM9C,cAAcf,mBAAUC,MAAMwD,SAAS5D,KAAKqE,MACvDC,QAASN,MAAM9C,cAAcf,mBAAUC,MAAMwD,SAASW,WAAWF,MACjEG,MAAOR,MAAM9C,cAAcf,mBAAUC,MAAMwD,SAASa,YAAYJ,MAChEK,aAAcV,MAAM9C,cAAcf,mBAAUC,MAAMwD,SAASe,cAAcC,sBAK/E1D,cAAiB2D,SAAYnF,MAAMgE,KAAKxC,cAAc2D,SACtDC,eAAiB,UACvBA,eAAeC,MAAQ,CACnBC,KAAMtF,MAAMC,UACZsF,QAASvF,MAAMqF,MACfG,OAAQhE,cAAcf,mBAAUC,MAAMwD,SAASuB,UAAUC,aAAa,UACtEC,MAAOnE,cAAcf,mBAAUC,MAAMwD,SAASyB,OAAOhB,MACrDiB,MAAOpE,cAAcf,mBAAUC,MAAMwD,SAAS0B,OAAOjB,MACrDkB,OAAQrE,cAAcf,mBAAUC,MAAMwD,SAAS2B,QAAQlB,MACvDmB,SAAUtE,cAAcf,mBAAUC,MAAMwD,SAAS6B,eAAeb,QAChEc,KAAMxE,cAAcf,mBAAUC,MAAMwD,SAAS+B,WAAWf,QACxDgB,MAAO1E,cAAcf,mBAAUC,MAAMwD,SAASiC,WAAWjB,QACzDkB,SAAU5E,cAAcf,mBAAUC,MAAMwD,SAASmC,cAAcnB,QAC/D7C,OAAAA,QAEJ+C,eAAekB,MAAO,EACflB,+CAU0B,CAACmB,SAAUC,YACvC,MAAMC,YAAYD,KACW,mBAAnBA,KAAKC,YACZF,SAASE,UAAYD,KAAKC,kBAG3BF"}