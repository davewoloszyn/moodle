{"version":3,"file":"embeddetails.min.js","sources":["../../src/embed/embeddetails.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media details class for embed.\n *\n * @module      tiny_media/embed/embeddetails\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Selectors from '../selectors';\nimport {MediaBase} from '../mediabase';\nimport {EmbedHandler} from './embedhandler';\nimport {EmbedThumbnailInsert} from './embedthumbnailinsert';\nimport EmbedModal from '../embedmodal';\nimport {alert} from 'core/notification';\nimport {component} from '../common';\nimport {getString} from 'core/str';\nimport {\n    sourceTypeChecked,\n    getFileName,\n    showElements,\n    hideElements,\n    stopMediaLoading,\n    body,\n    footer,\n} from '../helpers';\nimport {\n    getEmbeddedMediaDetails,\n    setPropertiesFromData,\n} from './embedhelpers';\n\nexport class EmbedDetails extends MediaBase {\n\n    selectorType = 'EMBED';\n\n    isEmbedPreviewDeleted = false;\n\n    constructor(data) {\n        super();\n        setPropertiesFromData(this, data);\n    }\n\n    /**\n     * Init the media details preview.\n     */\n    init = async() => {\n        this.currentModal.setTitle(getString('mediadetails', component));\n        sourceTypeChecked({\n            source: this.mediaSource,\n            root: this.root,\n            urlSelector: Selectors.EMBED.elements.fromUrl,\n            fileNameSelector: Selectors.EMBED.elements.fileNameLabel,\n        });\n        this.setMediaSourceAndPoster();\n        this.registerMediaDetailsEventListeners(this.currentModal);\n    };\n\n    /**\n     * Sets media source and thumbnail for the video.\n     */\n    setMediaSourceAndPoster = () => {\n        const box = this.root.querySelector(Selectors.EMBED.elements.previewBox);\n        const preview = this.root.querySelector(Selectors.EMBED.elements.preview);\n        preview.src = this.mediaSource;\n        preview.innerHTML = this.mediaSource;\n\n        if (['video', 'audio'].includes(this.mediaType)) {\n            let fileName = getFileName(this.root); // Get original filename.\n            if (this.isUpdating) {\n                if (!this.isEmbedPreviewDeleted) {\n                    fileName = this.mediaTitle; // Title from the selected media.\n                }\n            }\n\n            // Set the media name/title.\n            this.root.querySelector(Selectors.EMBED.elements.title).value = fileName;\n        }\n\n        if (this.mediaType === 'video') {\n            let videoHeight = null;\n            let videoWidth = null;\n            const videoTag = document.querySelector(Selectors.EMBED.elements.videoTag);\n\n            if (this.thumbnail) {\n                videoTag.poster = this.thumbnail;\n            }\n            videoTag.load();\n\n            preview.addEventListener('error', async() => {\n                alert(\n                    await getString('urlnotavailable', component),\n                    await getString('urlnotavailabledesc', component, this.mediaSource)\n                );\n\n                stopMediaLoading(this.root, 'EMBED');\n\n                const mediaHandler = new EmbedHandler();\n                mediaHandler.resetUploadForm();\n                return;\n            });\n\n            videoTag.addEventListener('loadedmetadata', () => {\n                videoHeight = videoTag.videoHeight;\n                videoWidth = videoTag.videoWidth;\n                const widthProportion = (videoWidth - videoHeight);\n                const isLandscape = widthProportion > 0;\n\n                // Store dimensions of the raw video.\n                this.mediaDimensions = {\n                    width: videoWidth,\n                    height: videoHeight,\n                };\n\n                // Set the media preview based on the media dimensions.\n                if (isLandscape) {\n                    videoTag.width = box.offsetWidth;\n                } else {\n                    videoTag.height = box.offsetHeight;\n                }\n            });\n\n            videoTag.addEventListener('canplay', () => {\n                const height = this.root.querySelector(Selectors.EMBED.elements.height);\n                const width = this.root.querySelector(Selectors.EMBED.elements.width);\n\n                if (height.value === '' && width.value === '') {\n                    height.value = videoHeight;\n                    width.value = videoWidth;\n                }\n\n                // Size checking and adjustment.\n                if (videoHeight === parseInt(height.value) && videoWidth === parseInt(width.value)) {\n                    this.currentWidth = this.mediaDimensions.width;\n                    this.currentHeight = this.mediaDimensions.height;\n                    this.sizeChecked('original');\n                } else {\n                    this.currentWidth = parseInt(width.value);\n                    this.currentHeight = parseInt(height.value);\n                    this.sizeChecked('custom');\n                }\n            });\n        } else if (this.mediaType === 'audio') {\n            const audioTag = this.root.querySelector(Selectors.EMBED.elements.audioTag);\n            audioTag.load();\n        } else {\n            // Set iframe width/height = box width/height.\n            preview.width = box.offsetWidth;\n            preview.height = box.offsetHeight;\n        }\n    };\n\n    /**\n     * Deletes the media after confirming with the user and loads the insert media page.\n     */\n    deleteMedia = () => {\n        Notification.deleteCancelPromise(\n            getString('deletemedia', 'tiny_media'),\n            getString('deletemediawarning', 'tiny_media'),\n        ).then(() => {\n            // Reset media upload form.\n            this.isEmbedPreviewDeleted = true;\n            const mediaHandler = new EmbedHandler(this);\n            mediaHandler.resetUploadForm();\n            delete this.mediaData;\n            return;\n        }).catch(error => {\n            window.console.log(error);\n        });\n    };\n\n    /**\n     * Shows the insert thumbnail dialogue.\n     */\n    showUploadThumbnail = async() => {\n        const uploadThumbnailModal = await EmbedModal.create();\n        const root = uploadThumbnailModal.getRoot()[0];\n\n        const templateContext = {\n            elementid: this.editor.id,\n            showDropzone: this.canShowDropZone,\n            bodyTemplate: Selectors.EMBED.template.body.insertMediaBody,\n            footerTemplate: Selectors.EMBED.template.footer.insertMediaFooter,\n            isInsertThumbnail: true,\n            selector: 'EMBED',\n        };\n\n        // Get selected media metadata.\n        const mediaData = getEmbeddedMediaDetails(this);\n        const mediaHandler = new EmbedHandler(this);\n        const mediaDataContext = await mediaHandler.getMediaTemplateContext(mediaData);\n\n        Promise.all([body(templateContext, root), footer(templateContext, root)])\n            .then(() => {\n                if (!this.currentModal.insertMediaModal) {\n                    this.currentModal.insertMediaModal = this.currentModal;\n                }\n                this.currentModal.uploadThumbnailModal = uploadThumbnailModal;\n                this.thumbnailModalRoot = root;\n\n                const mediaThumbnailInsert = new EmbedThumbnailInsert(this);\n                mediaThumbnailInsert.init(mediaDataContext);\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Only registers event listeners for new loaded elements in mediaDetails.\n     */\n    registerMediaDetailsEventListeners = async() => {\n        // Handle media preview delete.\n        const deleteMedia = this.root.querySelector(Selectors.EMBED.actions.deleteMedia);\n        if (deleteMedia) {\n            deleteMedia.addEventListener('click', () => {\n                this.deleteMedia();\n            });\n        }\n\n        // Handle media autoplay and mute.\n        const autoPlay = this.root.querySelector(Selectors.EMBED.elements.mediaAutoplay);\n        const mute = this.root.querySelector(Selectors.EMBED.elements.mediaMute);\n        if (autoPlay && mute && this.mediaType === 'link') {\n            autoPlay.addEventListener('change', () => {\n                if (autoPlay.checked) {\n                    mute.checked = true;\n                }\n            });\n\n            mute.addEventListener('change', () => {\n                if (autoPlay.checked && !mute.checked) {\n                    autoPlay.checked = false;\n                }\n            });\n        }\n\n        // Show subtitles and captions settings.\n        const showSubtitleCaption = this.root.querySelector(Selectors.EMBED.actions.showSubtitleCaption);\n        if (showSubtitleCaption) {\n            showSubtitleCaption.addEventListener('click', () => {\n                showElements([\n                    Selectors.EMBED.elements.mediaSubtitleCaptionFooter,\n                    Selectors.EMBED.elements.mediaSubtitleCaptionBody,\n                ], this.root);\n                hideElements([\n                    Selectors.EMBED.elements.mediaDetailsBody,\n                    Selectors.EMBED.elements.mediaDetailsFooter,\n                ], this.root);\n            });\n        }\n\n        // Back to media preview.\n        const backToMediaDetails = this.root.querySelector(Selectors.EMBED.actions.backToMediaDetails);\n        if (backToMediaDetails) {\n            backToMediaDetails.addEventListener('click', () => {\n                hideElements([\n                    Selectors.EMBED.elements.mediaSubtitleCaptionFooter,\n                    Selectors.EMBED.elements.mediaSubtitleCaptionBody,\n                ], this.root);\n                showElements([\n                    Selectors.EMBED.elements.mediaDetailsBody,\n                    Selectors.EMBED.elements.mediaDetailsFooter,\n                ], this.root);\n            });\n        }\n\n        // Handle the original size when selected.\n        const sizeOriginalEle = this.root.querySelector(Selectors.EMBED.elements.sizeOriginal);\n        if (sizeOriginalEle) {\n            sizeOriginalEle.addEventListener('change', () => {\n                this.sizeChecked('original');\n            });\n        }\n\n        // Handle the custom size when selected.\n        const sizeCustomEle = this.root.querySelector(Selectors.EMBED.elements.sizeCustom);\n        if (sizeCustomEle) {\n            sizeCustomEle.addEventListener('change', () => {\n                this.sizeChecked('custom');\n            });\n        }\n\n        // Handle the custom with size when inputted.\n        const widthEle = this.root.querySelector(Selectors.EMBED.elements.width);\n        if (widthEle) {\n            widthEle.addEventListener('input', () => {\n                // Avoid empty value.\n                widthEle.value = widthEle.value === \"\" ? 0 : Number(widthEle.value);\n                this.autoAdjustSize();\n            });\n        }\n\n        // Handle the custom height size when inputted.\n        const heightEle = this.root.querySelector(Selectors.EMBED.elements.height);\n        if (heightEle) {\n            heightEle.addEventListener('input', () => {\n                // Avoid empty value.\n                heightEle.value = heightEle.value === \"\" ? 0 : Number(heightEle.value);\n                this.autoAdjustSize(true);\n            });\n        }\n\n        const uploadCustomThumbnail = this.root.querySelector(Selectors.EMBED.actions.uploadCustomThumbnail);\n        if (uploadCustomThumbnail) {\n            uploadCustomThumbnail.addEventListener('click', () => {\n                this.showUploadThumbnail();\n            });\n        }\n    };\n}\n"],"names":["EmbedDetails","MediaBase","constructor","data","async","currentModal","setTitle","component","source","this","mediaSource","root","urlSelector","Selectors","EMBED","elements","fromUrl","fileNameSelector","fileNameLabel","setMediaSourceAndPoster","registerMediaDetailsEventListeners","box","querySelector","previewBox","preview","src","innerHTML","includes","mediaType","fileName","isUpdating","isEmbedPreviewDeleted","mediaTitle","title","value","videoHeight","videoWidth","videoTag","document","thumbnail","poster","load","addEventListener","EmbedHandler","resetUploadForm","isLandscape","mediaDimensions","width","height","offsetWidth","offsetHeight","parseInt","currentWidth","currentHeight","sizeChecked","audioTag","deleteCancelPromise","then","mediaData","catch","error","window","console","log","uploadThumbnailModal","EmbedModal","create","getRoot","templateContext","elementid","editor","id","showDropzone","canShowDropZone","bodyTemplate","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","isInsertThumbnail","selector","mediaHandler","mediaDataContext","getMediaTemplateContext","Promise","all","insertMediaModal","thumbnailModalRoot","EmbedThumbnailInsert","init","deleteMedia","actions","autoPlay","mediaAutoplay","mute","mediaMute","checked","showSubtitleCaption","mediaSubtitleCaptionFooter","mediaSubtitleCaptionBody","mediaDetailsBody","mediaDetailsFooter","backToMediaDetails","sizeOriginalEle","sizeOriginal","sizeCustomEle","sizeCustom","widthEle","Number","autoAdjustSize","heightEle","uploadCustomThumbnail","showUploadThumbnail"],"mappings":"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"}