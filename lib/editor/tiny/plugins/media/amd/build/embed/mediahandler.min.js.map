{"version":3,"file":"mediahandler.min.js","sources":["../../src/embed/mediahandler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media handler class for embed.\n *\n * @module      tiny_media/embed/mediahandler\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from \"../selectors\";\nimport {MediaInsert} from './mediainsert';\nimport {insertMediaTemplateContext} from \"./mediahelpers\";\nimport {\n    body,\n    footer,\n    isValidUrl,\n    hideElements,\n} from '../helpers';\nimport {PropertySetter} from '../propertysetter';\n\nexport class MediaHandler extends PropertySetter {\n\n    constructor(data) {\n        super(data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Load the media insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     */\n    loadTemplatePromise = (templateContext) => {\n        templateContext.elementid = this.editor.id;\n        templateContext.bodyTemplate = Selectors.EMBED.template.body.insertMediaBody;\n        templateContext.footerTemplate = Selectors.EMBED.template.footer.insertMediaFooter;\n        templateContext.selector = 'EMBED';\n\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                const mediaInsert = new MediaInsert(this);\n                mediaInsert.init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Reset the media insert modal form.\n     */\n    resetUploadForm = () => {\n        this.mediaType = null; // Set to null to be set again.\n        this.loadTemplatePromise(insertMediaTemplateContext(this));\n    };\n\n    /**\n     * Load the media preview dialogue.\n     *\n     * @param {string} url String of media url\n     */\n    loadMediaPreview = (url) => {\n        (new MediaInsert(this)).loadMediaPreview(url);\n    };\n\n    /**\n     * Handles changes in the media URL input field and loads a preview of the media if the URL has changed.\n     */\n    urlChanged() {\n        hideElements(Selectors.EMBED.elements.urlWarning, this.root);\n        const url = this.root.querySelector(Selectors.EMBED.elements.fromUrl).value;\n        if (url && url !== this.currentUrl) {\n            this.loadMediaPreview(url);\n        }\n    }\n\n    /**\n     * Handle click events.\n     *\n     * @param {html} e Selected element\n     */\n    clickHandler = async(e) => {\n        const addUrlEle = e.target.closest(Selectors.EMBED.actions.addUrl);\n        if (addUrlEle) {\n            this.urlChanged();\n        }\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     *\n     * @param {html} input Url input field\n     */\n    toggleUrlButton(input) {\n        const url = input.value;\n        const addUrl = this.root.querySelector(Selectors.EMBED.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && isValidUrl(url));\n    }\n\n    registerEventListeners = async(modal) => {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePickerTrack) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.EMBED.elements.fromUrl);\n            if (urlEle) {\n                this.toggleUrlButton(urlEle);\n            }\n        });\n    };\n}\n"],"names":["MediaHandler","PropertySetter","constructor","data","templateContext","elementid","this","editor","id","bodyTemplate","Selectors","EMBED","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","selector","Promise","all","root","then","MediaInsert","init","catch","error","window","console","log","mediaType","loadTemplatePromise","url","loadMediaPreview","async","e","target","closest","actions","addUrl","urlChanged","modal","getBody","getRoot","canShowFilePickerTrack","addEventListener","clickHandler","bind","urlEle","elements","fromUrl","toggleUrlButton","urlWarning","querySelector","value","currentUrl","input","disabled"],"mappings":"4hBAkCaA,qBAAqBC,+BAE9BC,YAAYC,YACFA,kDAQaC,kBACnBA,gBAAgBC,UAAYC,KAAKC,OAAOC,GACxCJ,gBAAgBK,aAAeC,mBAAUC,MAAMC,SAASC,KAAKC,gBAC7DV,gBAAgBW,eAAiBL,mBAAUC,MAAMC,SAASI,OAAOC,kBACjEb,gBAAgBc,SAAW,QAE3BC,QAAQC,IAAI,EAAC,iBAAKhB,gBAAiBE,KAAKe,OAAO,mBAAOjB,gBAAiBE,KAAKe,QACvEC,MAAK,KACkB,IAAIC,yBAAYjB,MACxBkB,UAGfC,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,qDAOb,UACTI,UAAY,UACZC,qBAAoB,4CAA2BzB,mDAQpC0B,UACXT,yBAAYjB,MAAO2B,iBAAiBD,6CAmB9BE,MAAAA,IACOC,EAAEC,OAAOC,QAAQ3B,mBAAUC,MAAM2B,QAAQC,cAElDC,+DAeYN,MAAAA,cACfO,MAAMC,gBAENrB,KADQoB,MAAME,UACD,GACfrC,KAAKsC,wBACLvB,KAAKwB,iBAAiB,QAASvC,KAAKwC,aAAaC,KAAKzC,OAG1De,KAAKwB,iBAAiB,SAAUV,UACtBa,OAASb,EAAEC,OAAOC,QAAQ3B,mBAAUC,MAAMsC,SAASC,SACrDF,aACKG,gBAAgBH,cA1CjCR,uCACiB9B,mBAAUC,MAAMsC,SAASG,WAAY9C,KAAKe,YACjDW,IAAM1B,KAAKe,KAAKgC,cAAc3C,mBAAUC,MAAMsC,SAASC,SAASI,MAClEtB,KAAOA,MAAQ1B,KAAKiD,iBACftB,iBAAiBD,KAqB9BmB,gBAAgBK,aACNxB,IAAMwB,MAAMF,MACHhD,KAAKe,KAAKgC,cAAc3C,mBAAUC,MAAM2B,QAAQC,QACxDkB,WAAqB,KAARzB,MAAc,uBAAWA"}