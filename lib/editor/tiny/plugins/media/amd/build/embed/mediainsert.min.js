define("tiny_media/embed/mediainsert",["exports","core/notification","core/prefetch","core/str","../common","../propertysetter","./mediahelpers","../selectors","./mediahandler","../helpers"],(function(_exports,_notification,_prefetch,_str,_common,_propertysetter,_mediahelpers,_selectors,_mediahandler,_helpers){var obj;function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.MediaInsert=void 0,_selectors=(obj=_selectors)&&obj.__esModule?obj:{default:obj},(0,_prefetch.prefetchStrings)("tiny_media",["insertmedia"]);class MediaInsert extends _propertysetter.PropertySetter{constructor(data){super(data),_defineProperty(this,"init",(async()=>{const langStringKeys=["insertmedia"],langStringValues=await(0,_str.getStrings)([...langStringKeys].map((key=>({key:key,component:_common.component}))));this.langStrings=Object.fromEntries(langStringKeys.map(((key,index)=>[key,langStringValues[index]]))),this.currentModal.setTitle(this.langStrings.insertmedia)})),_defineProperty(this,"loadMediaPreview",(async url=>{(0,_helpers.startMediaLoading)(this.root,"EMBED"),this.mediaSource=(0,_mediahelpers.formatMediaUrl)(url);const mediaType=await(0,_helpers.getFileMimeTypeFromUrl)(this.mediaSource);if(_selectors.default.EMBED.mediaTypes.includes(mediaType))(0,_helpers.stopMediaLoading)(this.root,"EMBED");else{(0,_notification.alert)(await(0,_str.getString)("onlymediafiles",_common.component),await(0,_str.getString)("onlymediafilesdesc",_common.component)),(0,_helpers.stopMediaLoading)(this.root,"EMBED");(new _mediahandler.MediaHandler).resetUploadForm()}}))}}_exports.MediaInsert=MediaInsert}));

//# sourceMappingURL=mediainsert.min.js.map