{"version":3,"file":"mediahelpers.min.js","sources":["../../src/embed/mediahelpers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin helpers for embed.\n *\n * @module      tiny_media/embed/mediahelpers\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from '../selectors';\nimport {\n    convertStringUrlToObject,\n    createUrlParams,\n} from '../helpers';\n\n/**\n * Return template context for insert media.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const insertMediaTemplateContext = (props) => {\n    return {\n        mediaType: props.mediaType,\n        showDropzone: props.canShowDropZone,\n        showFilePicker: props.canShowFilePicker,\n    };\n};\n\n/**\n * Check if the url is from a known media site.\n *\n * @param {string} url\n * @returns {boolean}\n */\nexport const isUrlFromKnownMediaSites = (url) => {\n    let state = false;\n    const sites = Selectors.EMBED.mediaSites;\n    for (const site in sites) {\n        if (url.includes(sites[site])) {\n            state = true;\n            break;\n        }\n    }\n    return state;\n};\n\n/**\n * Format url when inserting media link to be previewed.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const formatMediaUrl = (url) => {\n    // Convert the string url into url param object.\n    const params = convertStringUrlToObject(url);\n\n    // Format the url for youtube links.\n    if (url.includes(Selectors.EMBED.mediaSites.youtube)) {\n        let fetchedUrl = null;\n        let fetchedUrlValue = null;\n        for (const k in params) {\n            if (url.includes(k)) {\n                fetchedUrl = k;\n                fetchedUrlValue = params[k];\n                delete params[k];\n                break;\n            }\n        }\n        url = fetchedUrl.replace('watch?v', 'embed/');\n        url = url + fetchedUrlValue + '?' + createUrlParams(params);\n    }\n    return url;\n};\n"],"names":["props","mediaType","showDropzone","canShowDropZone","showFilePicker","canShowFilePicker","url","state","sites","Selectors","EMBED","mediaSites","site","includes","params","youtube","fetchedUrl","fetchedUrlValue","k","replace"],"mappings":";;;;;;;oQAmC2CA,QAChC,CACHC,UAAWD,MAAMC,UACjBC,aAAcF,MAAMG,gBACpBC,eAAgBJ,MAAMK,sDAUWC,UACjCC,OAAQ,QACNC,MAAQC,mBAAUC,MAAMC,eACzB,MAAMC,QAAQJ,SACXF,IAAIO,SAASL,MAAMI,OAAQ,CAC3BL,OAAQ,eAITA,+BASoBD,YAErBQ,QAAS,qCAAyBR,QAGpCA,IAAIO,SAASJ,mBAAUC,MAAMC,WAAWI,SAAU,KAC9CC,WAAa,KACbC,gBAAkB,SACjB,MAAMC,KAAKJ,UACRR,IAAIO,SAASK,GAAI,CACjBF,WAAaE,EACbD,gBAAkBH,OAAOI,UAClBJ,OAAOI,SAKtBZ,KADAA,IAAMU,WAAWG,QAAQ,UAAW,WACxBF,gBAAkB,KAAM,4BAAgBH,eAEjDR"}