{"version":3,"file":"mediahelpers.min.js","sources":["../../src/embed/mediahelpers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin helpers for embed.\n *\n * @module      tiny_media/embed/mediahelpers\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from '../selectors';\nimport {\n    convertStringUrlToObject,\n    createUrlParams,\n} from '../helpers';\nimport {\n    getCurrentLanguage,\n    getMoodleLang\n} from 'editor_tiny/options';\nimport {getStrings} from 'core/str';\nimport {component} from \"../common\";\n\n/**\n * Return template context for insert media.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const insertMediaTemplateContext = (props) => {\n    return {\n        mediaType: props.mediaType,\n        showDropzone: props.canShowDropZone,\n        showFilePicker: props.canShowFilePicker,\n    };\n};\n\n/**\n * Check if the url is from a known media site.\n *\n * @param {string} url\n * @returns {boolean}\n */\nexport const isUrlFromKnownMediaSites = (url) => {\n    let state = false;\n    const sites = Selectors.EMBED.mediaSites;\n    for (const site in sites) {\n        if (url.includes(sites[site])) {\n            state = true;\n            break;\n        }\n    }\n    return state;\n};\n\n/**\n * Format url when inserting media link to be previewed.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const formatMediaUrl = (url) => {\n    // Convert the string url into url param object.\n    const params = convertStringUrlToObject(url);\n\n    // Format the url for youtube links.\n    if (url.includes(Selectors.EMBED.mediaSites.youtube)) {\n        let fetchedUrl = null;\n        let fetchedUrlValue = null;\n        for (const k in params) {\n            if (url.includes(k)) {\n                fetchedUrl = k;\n                fetchedUrlValue = params[k];\n                delete params[k];\n                break;\n            }\n        }\n        url = fetchedUrl.replace('watch?v', 'embed/');\n        url = url + fetchedUrlValue + '?' + createUrlParams(params);\n    }\n    return url;\n};\n\n/**\n * Return selected media type and element.\n *\n * @param {editor} editor\n * @returns {Array}\n */\nexport const getSelectedMediaElement = (editor) => {\n    let mediaType = null;\n    let selectedMedia = null;\n    const mediaElm = editor.selection.getNode();\n\n    if (!mediaElm) {\n        mediaType = null;\n        selectedMedia = null;\n    } else if (mediaElm.nodeName.toLowerCase() === 'video' || mediaElm.nodeName.toLowerCase() === 'audio') {\n        mediaType = mediaElm.nodeName.toLowerCase();\n        selectedMedia = mediaElm;\n    } else if (mediaElm.nodeName.toLowerCase() === 'a') {\n        mediaType = 'link';\n        selectedMedia = mediaElm;\n    } else if (mediaElm.querySelector('video')) {\n        mediaType = 'video';\n        selectedMedia = mediaElm.querySelector('video');\n    } else if (mediaElm.querySelector('audio')) {\n        mediaType = 'audio';\n        selectedMedia = mediaElm.querySelector('audio');\n    }\n\n    return [mediaType, selectedMedia];\n};\n\n/**\n * Get current moodle languages.\n *\n * @param {editor} editor\n * @returns {object}\n */\nexport const prepareMoodleLang = (editor) => {\n    const moodleLangs = getMoodleLang(editor);\n    const currentLanguage = getCurrentLanguage(editor);\n\n    const installed = Object.entries(moodleLangs.installed).map(([lang, code]) => ({\n        lang,\n        code,\n        \"default\": lang === currentLanguage,\n    }));\n\n    const available = Object.entries(moodleLangs.available).map(([lang, code]) => ({\n        lang,\n        code,\n        \"default\": lang === currentLanguage,\n    }));\n\n    return {\n        installed,\n        available,\n    };\n};\n\n/**\n * Get help strings.\n *\n * @returns {object}\n */\nexport const getHelpStrings = async() => {\n    const [\n        customsize,\n    ] = await getStrings([\n        'customsize_help',\n    ].map((key) => ({\n        key,\n        component,\n    })));\n\n    return {\n        customsize,\n    };\n};\n\n/**\n * Return template context for media details.\n *\n * @param {object} props\n * @returns {object}\n */\nexport const mediaDetailsTemplateContext = async(props) => {\n    const context = {\n        bodyTemplate: Selectors.EMBED.template.body.mediaDetailsBody,\n        footerTemplate: Selectors.EMBED.template.footer.mediaDetailsFooter,\n        isVideo: (props.mediaType === 'video'),\n        isAudio: (props.mediaType === 'audio'),\n        isLink: (props.mediaType === 'link'),\n        isUpdating: props.isUpdating,\n    };\n\n    if (props.mediaData) {\n        return {\n            ...context,\n            ...props.mediaData,\n        };\n    } else {\n        return {\n            ...context,\n            ...await props.mediaTemplateContext,\n        };\n    }\n};\n\n/**\n * Get based url from the link.\n *\n * @param {string} url\n * @returns {string}\n */\nexport const getLinkBasedUrl = (url) => {\n    if (url.includes(Selectors.EMBED.mediaSites.youtube)) {\n        if (url.includes('embed/')) {\n            const urlParams = url.split('embed/');\n            let id = null;\n            if (urlParams[1].includes('?')) {\n                id = urlParams[1].split('?')[0];\n            } else {\n                id = urlParams[1];\n            }\n            url = `${urlParams[0]}watch?v=${id}&`;\n        }\n    }\n    return url;\n};\n"],"names":["props","mediaType","showDropzone","canShowDropZone","showFilePicker","canShowFilePicker","url","state","sites","Selectors","EMBED","mediaSites","site","includes","params","youtube","fetchedUrl","fetchedUrlValue","k","replace","editor","selectedMedia","mediaElm","selection","getNode","nodeName","toLowerCase","querySelector","moodleLangs","currentLanguage","installed","Object","entries","map","_ref","lang","code","available","_ref2","async","customsize","key","component","context","bodyTemplate","template","body","mediaDetailsBody","footerTemplate","footer","mediaDetailsFooter","isVideo","isAudio","isLink","isUpdating","mediaData","mediaTemplateContext","urlParams","split","id"],"mappings":";;;;;;;sZAyC2CA,QAChC,CACHC,UAAWD,MAAMC,UACjBC,aAAcF,MAAMG,gBACpBC,eAAgBJ,MAAMK,sDAUWC,UACjCC,OAAQ,QACNC,MAAQC,mBAAUC,MAAMC,eACzB,MAAMC,QAAQJ,SACXF,IAAIO,SAASL,MAAMI,OAAQ,CAC3BL,OAAQ,eAITA,+BASoBD,YAErBQ,QAAS,qCAAyBR,QAGpCA,IAAIO,SAASJ,mBAAUC,MAAMC,WAAWI,SAAU,KAC9CC,WAAa,KACbC,gBAAkB,SACjB,MAAMC,KAAKJ,UACRR,IAAIO,SAASK,GAAI,CACjBF,WAAaE,EACbD,gBAAkBH,OAAOI,UAClBJ,OAAOI,SAKtBZ,KADAA,IAAMU,WAAWG,QAAQ,UAAW,WACxBF,gBAAkB,KAAM,4BAAgBH,eAEjDR,sCAS6Bc,aAChCnB,UAAY,KACZoB,cAAgB,WACdC,SAAWF,OAAOG,UAAUC,iBAE7BF,SAG0C,UAApCA,SAASG,SAASC,eAAiE,UAApCJ,SAASG,SAASC,eACxEzB,UAAYqB,SAASG,SAASC,cAC9BL,cAAgBC,UAC2B,MAApCA,SAASG,SAASC,eACzBzB,UAAY,OACZoB,cAAgBC,UACTA,SAASK,cAAc,UAC9B1B,UAAY,QACZoB,cAAgBC,SAASK,cAAc,UAChCL,SAASK,cAAc,WAC9B1B,UAAY,QACZoB,cAAgBC,SAASK,cAAc,WAbvC1B,UAAY,KACZoB,cAAgB,MAeb,CAACpB,UAAWoB,2CASWD,eACxBQ,aAAc,0BAAcR,QAC5BS,iBAAkB,+BAAmBT,cAcpC,CACHU,UAbcC,OAAOC,QAAQJ,YAAYE,WAAWG,KAAIC,WAAEC,KAAMC,iBAAW,CAC3ED,KAAAA,KACAC,KAAAA,aACWD,OAASN,oBAWpBQ,UARcN,OAAOC,QAAQJ,YAAYS,WAAWJ,KAAIK,YAAEH,KAAMC,kBAAW,CAC3ED,KAAAA,KACAC,KAAAA,aACWD,OAASN,8CAcEU,gBAEtBC,kBACM,mBAAW,CACjB,mBACFP,KAAKQ,OACHA,IAAAA,IACAC,UAAAA,6BAGG,CACHF,WAAAA,kDAUmCD,MAAAA,cACjCI,QAAU,CACZC,aAAcnC,mBAAUC,MAAMmC,SAASC,KAAKC,iBAC5CC,eAAgBvC,mBAAUC,MAAMmC,SAASI,OAAOC,mBAChDC,QAA8B,UAApBnD,MAAMC,UAChBmD,QAA8B,UAApBpD,MAAMC,UAChBoD,OAA6B,SAApBrD,MAAMC,UACfqD,WAAYtD,MAAMsD,mBAGlBtD,MAAMuD,UACC,IACAZ,WACA3C,MAAMuD,WAGN,IACAZ,iBACM3C,MAAMwD,gDAWKlD,SACxBA,IAAIO,SAASJ,mBAAUC,MAAMC,WAAWI,UACpCT,IAAIO,SAAS,UAAW,OAClB4C,UAAYnD,IAAIoD,MAAM,cACxBC,GAAK,KAELA,GADAF,UAAU,GAAG5C,SAAS,KACjB4C,UAAU,GAAGC,MAAM,KAAK,GAExBD,UAAU,GAEnBnD,cAASmD,UAAU,sBAAaE,eAGjCrD"}