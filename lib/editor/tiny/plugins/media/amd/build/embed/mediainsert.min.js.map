{"version":3,"file":"mediainsert.min.js","sources":["../../src/embed/mediainsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media insertion class for embed.\n *\n * @module      tiny_media/embed/mediainsert\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {alert} from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings, getString} from 'core/str';\nimport {component} from \"../common\";\nimport {PropertySetter} from '../propertysetter';\nimport {formatMediaUrl} from './mediahelpers';\nimport Selectors from \"../selectors\";\nimport {MediaHandler} from './mediahandler';\nimport {\n    getFileMimeTypeFromUrl,\n    startMediaLoading,\n    stopMediaLoading,\n} from '../helpers';\n\nprefetchStrings('tiny_media', [\n    'insertmedia',\n]);\n\nexport class MediaInsert extends PropertySetter {\n\n    constructor(data) {\n        super(data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the dropzone and lang strings.\n     */\n    init = async() => {\n        const langStringKeys = [\n            'insertmedia',\n        ];\n        const langStringValues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringValues[index]]));\n        this.currentModal.setTitle(this.langStrings.insertmedia);\n    };\n\n    /**\n     * Loads and displays a preview media based on the provided URL, and handles media loading events.\n     *\n     * @param {string} url - The URL of the media to load and display.\n     */\n    loadMediaPreview = async(url) => {\n        startMediaLoading(this.root, 'EMBED');\n        this.mediaSource = formatMediaUrl(url);\n\n        // Get media mime type.\n        const mediaType = await getFileMimeTypeFromUrl(this.mediaSource);\n        if (!Selectors.EMBED.mediaTypes.includes(mediaType)) {\n            alert(\n                await getString('onlymediafiles', component),\n                await getString('onlymediafilesdesc', component)\n            );\n\n            stopMediaLoading(this.root, 'EMBED');\n\n            const mediaHandler = new MediaHandler();\n            mediaHandler.resetUploadForm();\n            return;\n        }\n        stopMediaLoading(this.root, 'EMBED');\n    };\n}\n"],"names":["MediaInsert","PropertySetter","constructor","data","async","langStringKeys","langStringValues","map","key","component","langStrings","Object","fromEntries","index","currentModal","setTitle","this","insertmedia","root","mediaSource","url","mediaType","Selectors","EMBED","mediaTypes","includes","MediaHandler","resetUploadForm"],"mappings":"opBAqCgB,aAAc,CAC1B,sBAGSA,oBAAoBC,+BAE7BC,YAAYC,YACFA,mCAMHC,gBACGC,eAAiB,CACnB,eAEEC,uBAAyB,mBAAW,IAAID,gBAAgBE,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,4BAC7EC,YAAcC,OAAOC,YAAYP,eAAeE,KAAI,CAACC,IAAKK,QAAU,CAACL,IAAKF,iBAAiBO,gBAC3FC,aAAaC,SAASC,KAAKN,YAAYO,yDAQ7Bb,MAAAA,qCACGY,KAAKE,KAAM,cACxBC,aAAc,gCAAeC,WAG5BC,gBAAkB,mCAAuBL,KAAKG,gBAC/CG,mBAAUC,MAAMC,WAAWC,SAASJ,yCAYxBL,KAAKE,KAAM,4CAVd,kBAAU,iBAAkBT,yBAC5B,kBAAU,qBAAsBA,kDAGzBO,KAAKE,KAAM,UAEP,IAAIQ,4BACZC"}