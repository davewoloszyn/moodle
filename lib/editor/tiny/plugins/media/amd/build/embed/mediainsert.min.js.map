<<<<<<< Updated upstream
{"version":3,"file":"mediainsert.min.js","sources":["../../src/embed/mediainsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media insertion class for embed.\n *\n * @module      tiny_media/embed/mediainsert\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings} from 'core/str';\nimport {component} from \"../common\";\nimport {PropertySetter} from '../propertysetter';\n\nprefetchStrings('tiny_media', [\n    'insertmedia',\n]);\n\nexport class MediaInsert extends PropertySetter {\n\n    constructor(data) {\n        super(data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the dropzone and lang strings.\n     */\n    init = async() => {\n        const langStringKeys = [\n            'insertmedia',\n        ];\n        const langStringValues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringValues[index]]));\n        this.currentModal.setTitle(this.langStrings[\"insertmedia\"]);\n    };\n}\n"],"names":["MediaInsert","PropertySetter","constructor","data","async","langStringKeys","langStringValues","map","key","component","langStrings","Object","fromEntries","index","currentModal","setTitle","this"],"mappings":"0RA4BgB,aAAc,CAC1B,sBAGSA,oBAAoBC,+BAE7BC,YAAYC,8BACFA,YAMHC,gBACGC,eAAiB,CACnB,eAEEC,uBAAyB,mBAAW,IAAID,gBAAgBE,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,4BAC7EC,YAAcC,OAAOC,YAAYP,eAAeE,KAAI,CAACC,IAAKK,QAAU,CAACL,IAAKF,iBAAiBO,gBAC3FC,aAAaC,SAASC,KAAKN,YAAL"}
=======
{"version":3,"file":"mediainsert.min.js","sources":["../../src/embed/mediainsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin media insertion class for embed.\n *\n * @module      tiny_media/embed/mediainsert\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {alert} from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings, getString} from 'core/str';\nimport {component} from \"../common\";\nimport {PropertySetter} from '../propertysetter';\nimport {\n    formatMediaUrl,\n    mediaDetailsTemplateContext,\n} from './mediahelpers';\nimport Selectors from \"../selectors\";\nimport {MediaHandler} from './mediahandler';\nimport {\n    getFileMimeTypeFromUrl,\n    startMediaLoading,\n    stopMediaLoading,\n    showElements,\n} from '../helpers';\nimport Dropzone from 'core/dropzone';\nimport uploadFile from 'editor_tiny/uploader';\nimport {MediaDetails} from './mediadetails';\n\nprefetchStrings('tiny_media', [\n    'insertmedia',\n    'addmediafilesdrop',\n    'loadingmedia',\n    'uploading',\n]);\n\nexport class MediaInsert extends PropertySetter {\n\n    constructor(data) {\n        super(data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the dropzone and lang strings.\n     */\n    init = async() => {\n        const langStringKeys = [\n            'insertmedia',\n            'addmediafilesdrop',\n            'loadingmedia',\n            'uploading',\n        ];\n        const langStringValues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringValues[index]]));\n        this.currentModal.setTitle(this.langStrings.insertmedia);\n\n        // Let's init the dropzone if canShowDropZone is true and mediaType is null.\n        if (this.canShowDropZone && !this.mediaType) {\n            const dropZoneEle = document.querySelector(Selectors.EMBED.elements.dropzoneContainer);\n            const dropZone = new Dropzone(\n                dropZoneEle,\n                'audio/*,video/*',\n                files => {\n                    this.handleUploadedFile(files);\n                }\n            );\n\n            dropZone.setLabel(this.langStrings[\"addmediafilesdrop\"]);\n            dropZone.init();\n        }\n    };\n\n    /**\n     * Loads and displays a preview media based on the provided URL, and handles media loading events.\n     *\n     * @param {string} url - The URL of the media to load and display.\n     */\n    loadMediaPreview = async(url) => {\n        startMediaLoading(this.root, 'EMBED');\n        this.mediaSource = formatMediaUrl(url);\n\n        // Get media mime type.\n        const mediaType = await getFileMimeTypeFromUrl(this.mediaSource);\n        if (!Selectors.EMBED.mediaTypes.includes(mediaType)) {\n            alert(\n                await getString('onlymediafiles', component),\n                await getString('onlymediafilesdesc', component)\n            );\n\n            stopMediaLoading(this.root, 'EMBED');\n\n            const mediaHandler = new MediaHandler();\n            mediaHandler.resetUploadForm();\n            return;\n        }\n\n        // Set mediaType to newly fetched mime type.\n        this.mediaType = mediaType;\n\n        const templateContext = await mediaDetailsTemplateContext({\n            ...this,\n            // Get data from the selected media element.\n            mediaTemplateContext: (new MediaHandler(this)).getMediaTemplateContext(),\n        });\n        templateContext.selector = 'EMBED';\n\n        if (this.mediaType === 'video' && this.isUpdating) {\n            // Let's get selected video height & width and create props for them to be used in mediaDetails.\n            const media = templateContext.media;\n            if (media.height !== '' && media.width !== '') {\n                this.mediaHeight = media.height;\n                this.mediaWidth = media.width;\n            }\n        }\n\n        if (this.isUpdating) {\n            // Will be used to set the media title if it's in update state.\n            this.mediaTitle = templateContext.media.title;\n        }\n\n        // Load the media details to preview the selected media.\n        const mediaHandler = new MediaHandler(this);\n        mediaHandler.loadMediaDetails(new MediaDetails(this), templateContext);\n    };\n\n    /**\n     * Updates the content of the loader icon.\n     *\n     * @param {HTMLElement} root - The root element containing the loader icon.\n     * @param {object} langStrings - An object containing language strings.\n     * @param {number|null} progress - The progress percentage (optional).\n     * @returns {void}\n     */\n    updateLoaderIcon = (root, langStrings, progress = null) => {\n        const loaderIcon = this.root.querySelector(Selectors.EMBED.elements.loaderIcon);\n        if (loaderIcon && loaderIcon.classList.contains('d-none')) {\n            showElements(Selectors.EMBED.elements.loaderIcon);\n        }\n\n        const loaderIconState = root.querySelector(Selectors.EMBED.elements.loaderIconContainer + ' div');\n        loaderIconState.innerHTML = (progress !== null) ?\n                               `${langStrings.uploading} ${Math.round(progress)}%` :\n                               langStrings[\"loadingmedia\"];\n    };\n\n    /**\n     * Handles media preview on file picker callback.\n     *\n     * @param {object} params Object of uploaded file\n     */\n    filePickerCallback = (params) => {\n        if (params.url) {\n            this.loadMediaPreview(params.url);\n        }\n    };\n\n    /**\n     * Handles the uploaded file, initiates the upload process, and updates the UI during the upload.\n     *\n     * @param {FileList} files - The list of files to upload (usually from a file input field).\n     * @returns {Promise<void>} A promise that resolves when the file is uploaded and processed.\n     */\n    handleUploadedFile = async(files) => {\n        try {\n            startMediaLoading(this.root, 'EMBED');\n            const fileURL = await uploadFile(this.editor, 'media', files[0], files[0].name, (progress) => {\n                this.updateLoaderIcon(this.root, this.langStrings, progress);\n            });\n\n            // Set the loader icon content to \"loading\" after the file upload completes.\n            this.updateLoaderIcon(this.root, this.langStrings);\n            this.filePickerCallback({url: fileURL});\n        } catch (error) {\n            // Handle the error.\n            const urlWarningLabelEle = this.root.querySelector(Selectors.EMBED.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = error.error !== undefined ? error.error : error;\n            showElements(Selectors.EMBED.elements.urlWarning, this.root);\n            stopMediaLoading(this.root, 'EMBED');\n        }\n    };\n}\n"],"names":["MediaInsert","PropertySetter","constructor","data","async","langStringKeys","langStringValues","map","key","component","langStrings","Object","fromEntries","index","currentModal","setTitle","this","insertmedia","canShowDropZone","mediaType","dropZoneEle","document","querySelector","Selectors","EMBED","elements","dropzoneContainer","dropZone","Dropzone","files","handleUploadedFile","setLabel","init","root","mediaSource","url","mediaTypes","includes","MediaHandler","resetUploadForm","templateContext","mediaTemplateContext","getMediaTemplateContext","selector","isUpdating","media","height","width","mediaHeight","mediaWidth","mediaTitle","title","loadMediaDetails","MediaDetails","progress","loaderIcon","_this","classList","contains","loaderIconState","loaderIconContainer","innerHTML","uploading","Math","round","params","loadMediaPreview","fileURL","editor","name","updateLoaderIcon","filePickerCallback","error","urlWarning","undefined"],"mappings":"g4BA4CgB,aAAc,CAC1B,cACA,oBACA,eACA,oBAGSA,oBAAoBC,+BAE7BC,YAAYC,sBACFA,8CAMHC,gBACGC,eAAiB,CACnB,cACA,oBACA,eACA,aAEEC,uBAAyB,mBAAW,IAAID,gBAAgBE,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,+BAC7EC,YAAcC,OAAOC,YAAYP,eAAeE,KAAI,CAACC,IAAKK,QAAU,CAACL,IAAKF,iBAAiBO,gBAC3FC,aAAaC,SAASC,KAAKN,YAAYO,aAGxCD,KAAKE,kBAAoBF,KAAKG,UAAW,OACnCC,YAAcC,SAASC,cAAcC,mBAAUC,MAAMC,SAASC,mBAC9DC,SAAW,IAAIC,kBACjBR,YACA,mBACAS,aACSC,mBAAmBD,UAIhCF,SAASI,SAASf,KAAKN,YAAL,mBAClBiB,SAASK,oDASE5B,MAAAA,qCACGY,KAAKiB,KAAM,cACxBC,aAAc,gCAAeC,WAG5BhB,gBAAkB,mCAAuBH,KAAKkB,iBAC/CX,mBAAUC,MAAMY,WAAWC,SAASlB,WAAY,+BAEvC,kBAAU,iBAAkBV,yBAC5B,kBAAU,qBAAsBA,kDAGzBO,KAAKiB,KAAM,qBAEP,IAAIK,4BACZC,uBAKZpB,UAAYA,gBAEXqB,sBAAwB,6CAA4B,IACnDxB,KAEHyB,qBAAuB,IAAIH,2BAAatB,MAAO0B,+BAEnDF,gBAAgBG,SAAW,QAEJ,UAAnB3B,KAAKG,WAAyBH,KAAK4B,WAAY,OAEzCC,MAAQL,gBAAgBK,MACT,KAAjBA,MAAMC,QAAiC,KAAhBD,MAAME,aACxBC,YAAcH,MAAMC,YACpBG,WAAaJ,MAAME,OAI5B/B,KAAK4B,kBAEAM,WAAaV,gBAAgBK,MAAMM,OAIvB,IAAIb,2BAAatB,MACzBoC,iBAAiB,IAAIC,2BAAarC,MAAOwB,6DAWvC,SAACP,KAAMvB,iBAAa4C,gEAAW,WACxCC,WAAaC,MAAKvB,KAAKX,cAAcC,mBAAUC,MAAMC,SAAS8B,YAChEA,YAAcA,WAAWE,UAAUC,SAAS,qCAC/BnC,mBAAUC,MAAMC,SAAS8B,kBAGpCI,gBAAkB1B,KAAKX,cAAcC,mBAAUC,MAAMC,SAASmC,oBAAsB,QAC1FD,gBAAgBE,UAA0B,OAAbP,mBACH5C,YAAYoD,sBAAaC,KAAKC,MAAMV,eACvC5C,YAAW,2DAQhBuD,SACdA,OAAO9B,UACF+B,iBAAiBD,OAAO9B,mDAUhB/B,MAAAA,2CAEKY,KAAKiB,KAAM,eACvBkC,cAAgB,qBAAWnD,KAAKoD,OAAQ,QAASvC,MAAM,GAAIA,MAAM,GAAGwC,MAAOf,gBACxEgB,iBAAiBtD,KAAKiB,KAAMjB,KAAKN,YAAa4C,kBAIlDgB,iBAAiBtD,KAAKiB,KAAMjB,KAAKN,kBACjC6D,mBAAmB,CAACpC,IAAKgC,UAChC,MAAOK,OAEsBxD,KAAKiB,KAAKX,cAAcC,mBAAUC,MAAMC,SAASgD,YACzDZ,eAA4Ba,IAAhBF,MAAMA,MAAsBA,MAAMA,MAAQA,gCAC5DjD,mBAAUC,MAAMC,SAASgD,WAAYzD,KAAKiB,oCACtCjB,KAAKiB,KAAM"}
>>>>>>> Stashed changes
